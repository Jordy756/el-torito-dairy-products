---
import UserIcon from "@icons/UserIcon.astro";

type Props = {
    id: string;
    name: string;
    time: string;
    testimony: string;
    gridArea: string;
    position: string;
};

const { id, name, time, testimony, gridArea, position } = Astro.props;
const viewTimeline = `--${id}`;
---

<article {id}>
    <header>
        <figure>
            <UserIcon width={32} height={32} color="var(--neutral-50)" />
        </figure>
        <div>
            <h6>{name}</h6>
            <p>{time}</p>
        </div>
    </header>
    <main>
        <p>{testimony}</p>
    </main>
</article>

<style define:vars={{ gridArea, position, viewTimeline }}>
    article {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
        padding: 2rem;
        border-radius: var(--border-radius-out);
        background-color: var(--neutral-50);
        box-shadow: var(--box-shadow);
    }

    article > header {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    article > header > figure {
        display: grid;
        place-items: center;
        padding: 0.75rem;
        border-radius: 9999px;
        background-color: var(--neutral-900);
    }

    article > header > div {
        display: flex;
        flex-direction: column;
    }

    article > header > div > p {
        font-size: 0.875rem;
        color: var(--neutral-700);
        opacity: 0.9;
    }

    article > main > p {
        max-width: 50ch;
    }

    @media (width >= 950px) {
        article {
            grid-area: var(--gridArea);
            width: fit-content;
            animation: reveal linear both;
            animation-timeline: view();
            animation-range: entry 15% cover 20%;
            transition:
                box-shadow 0.3s ease-in-out,
                transform 0.3s ease-in-out;
        }

        article:hover {
            box-shadow: var(--box-shadow-hover);
            transform: translate(5px, 5px);
            z-index: 1;
        }

        @keyframes reveal {
            from {
                translate: var(--position);
                opacity: 0;
            }
            to {
                translate: 0 0;
                opacity: 1;
            }
        }
    }

    @media screen and (width < 950px) {
        @supports (animation-timeline: view()) {
            article {
                view-timeline: var(--viewTimeline) inline;
                scroll-snap-align: center;
                min-width: calc(50% - 0.5rem);
            }
        }

        article {
            padding: 1rem;
        }

        article > main > p {
            max-width: 100%;
        }
    }

    @media (width < 600px) {
        @supports (animation-timeline: view()) {
            article {
                min-width: 100%;
            }
        }
    }
</style>
